""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input BikeImageRelateToOneInput {
  create: BikeImageCreateInput
  connect: BikeImageWhereUniqueInput
  disconnect: BikeImageWhereUniqueInput
  disconnectAll: Boolean
}

input WeightRelateToManyInput {
  create: [WeightCreateInput]
  connect: [WeightWhereUniqueInput]
  disconnect: [WeightWhereUniqueInput]
  disconnectAll: Boolean
}

input ReviewRelateToManyInput {
  create: [ReviewCreateInput]
  connect: [ReviewWhereUniqueInput]
  disconnect: [ReviewWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Bike {
  id: ID!
  name: String
  launchDate: String
  score: Int
  model_year: Int
  drive_train_type: String
  includes_powermeter: Boolean
  description: String
  photo: BikeImage
  weight(where: WeightWhereInput, search: String, sortBy: [SortWeightsBy!], orderBy: String, first: Int, skip: Int): [Weight!]!
  _weightMeta(where: WeightWhereInput, search: String, sortBy: [SortWeightsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  review(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): [Review!]!
  _reviewMeta(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  brakeType: String
  price: Int
}

input BikeWhereInput {
  AND: [BikeWhereInput]
  OR: [BikeWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  launchDate: String
  launchDate_not: String
  launchDate_lt: String
  launchDate_lte: String
  launchDate_gt: String
  launchDate_gte: String
  launchDate_in: [String]
  launchDate_not_in: [String]
  score: Int
  score_not: Int
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  score_in: [Int]
  score_not_in: [Int]
  model_year: Int
  model_year_not: Int
  model_year_lt: Int
  model_year_lte: Int
  model_year_gt: Int
  model_year_gte: Int
  model_year_in: [Int]
  model_year_not_in: [Int]
  drive_train_type: String
  drive_train_type_not: String
  drive_train_type_contains: String
  drive_train_type_not_contains: String
  drive_train_type_starts_with: String
  drive_train_type_not_starts_with: String
  drive_train_type_ends_with: String
  drive_train_type_not_ends_with: String
  drive_train_type_i: String
  drive_train_type_not_i: String
  drive_train_type_contains_i: String
  drive_train_type_not_contains_i: String
  drive_train_type_starts_with_i: String
  drive_train_type_not_starts_with_i: String
  drive_train_type_ends_with_i: String
  drive_train_type_not_ends_with_i: String
  drive_train_type_in: [String]
  drive_train_type_not_in: [String]
  includes_powermeter: Boolean
  includes_powermeter_not: Boolean
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  photo: BikeImageWhereInput
  photo_is_null: Boolean

  """ condition must be true for all nodes """
  weight_every: WeightWhereInput

  """ condition must be true for at least 1 node """
  weight_some: WeightWhereInput

  """ condition must be false for all nodes """
  weight_none: WeightWhereInput

  """ condition must be true for all nodes """
  review_every: ReviewWhereInput

  """ condition must be true for at least 1 node """
  review_some: ReviewWhereInput

  """ condition must be false for all nodes """
  review_none: ReviewWhereInput
  brakeType: String
  brakeType_not: String
  brakeType_contains: String
  brakeType_not_contains: String
  brakeType_starts_with: String
  brakeType_not_starts_with: String
  brakeType_ends_with: String
  brakeType_not_ends_with: String
  brakeType_i: String
  brakeType_not_i: String
  brakeType_contains_i: String
  brakeType_not_contains_i: String
  brakeType_starts_with_i: String
  brakeType_not_starts_with_i: String
  brakeType_ends_with_i: String
  brakeType_not_ends_with_i: String
  brakeType_in: [String]
  brakeType_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
}

input BikeWhereUniqueInput {
  id: ID!
}

enum SortBikesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  launchDate_ASC
  launchDate_DESC
  score_ASC
  score_DESC
  model_year_ASC
  model_year_DESC
  drive_train_type_ASC
  drive_train_type_DESC
  includes_powermeter_ASC
  includes_powermeter_DESC
  description_ASC
  description_DESC
  photo_ASC
  photo_DESC
  weight_ASC
  weight_DESC
  review_ASC
  review_DESC
  brakeType_ASC
  brakeType_DESC
  price_ASC
  price_DESC
}

input BikeUpdateInput {
  name: String
  launchDate: String
  score: Int
  model_year: Int
  drive_train_type: String
  includes_powermeter: Boolean
  description: String
  photo: BikeImageRelateToOneInput
  weight: WeightRelateToManyInput
  review: ReviewRelateToManyInput
  brakeType: String
  price: Int
}

input BikesUpdateInput {
  id: ID!
  data: BikeUpdateInput
}

input BikeCreateInput {
  name: String
  launchDate: String
  score: Int
  model_year: Int
  drive_train_type: String
  includes_powermeter: Boolean
  description: String
  photo: BikeImageRelateToOneInput
  weight: WeightRelateToManyInput
  review: ReviewRelateToManyInput
  brakeType: String
  price: Int
}

input BikesCreateInput {
  data: BikeCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input BikeRelateToOneInput {
  create: BikeCreateInput
  connect: BikeWhereUniqueInput
  disconnect: BikeWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type BikeImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  bike: Bike
}

input BikeImageWhereInput {
  AND: [BikeImageWhereInput]
  OR: [BikeImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  bike: BikeWhereInput
  bike_is_null: Boolean
}

input BikeImageWhereUniqueInput {
  id: ID!
}

enum SortBikeImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  bike_ASC
  bike_DESC
}

input BikeImageUpdateInput {
  image: Upload
  altText: String
  bike: BikeRelateToOneInput
}

input BikeImagesUpdateInput {
  id: ID!
  data: BikeImageUpdateInput
}

input BikeImageCreateInput {
  image: Upload
  altText: String
  bike: BikeRelateToOneInput
}

input BikeImagesCreateInput {
  data: BikeImageCreateInput
}

input PublicationImageRelateToOneInput {
  create: PublicationImageCreateInput
  connect: PublicationImageWhereUniqueInput
  disconnect: PublicationImageWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Publication {
  id: ID!
  name: String
  photo: PublicationImage
  review(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): [Review!]!
  _reviewMeta(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input PublicationWhereInput {
  AND: [PublicationWhereInput]
  OR: [PublicationWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  photo: PublicationImageWhereInput
  photo_is_null: Boolean

  """ condition must be true for all nodes """
  review_every: ReviewWhereInput

  """ condition must be true for at least 1 node """
  review_some: ReviewWhereInput

  """ condition must be false for all nodes """
  review_none: ReviewWhereInput
}

input PublicationWhereUniqueInput {
  id: ID!
}

enum SortPublicationsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  photo_ASC
  photo_DESC
  review_ASC
  review_DESC
}

input PublicationUpdateInput {
  name: String
  photo: PublicationImageRelateToOneInput
  review: ReviewRelateToManyInput
}

input PublicationsUpdateInput {
  id: ID!
  data: PublicationUpdateInput
}

input PublicationCreateInput {
  name: String
  photo: PublicationImageRelateToOneInput
  review: ReviewRelateToManyInput
}

input PublicationsCreateInput {
  data: PublicationCreateInput
}

input PublicationRelateToOneInput {
  create: PublicationCreateInput
  connect: PublicationWhereUniqueInput
  disconnect: PublicationWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type PublicationImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  publication: Publication
}

input PublicationImageWhereInput {
  AND: [PublicationImageWhereInput]
  OR: [PublicationImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  publication: PublicationWhereInput
  publication_is_null: Boolean
}

input PublicationImageWhereUniqueInput {
  id: ID!
}

enum SortPublicationImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  publication_ASC
  publication_DESC
}

input PublicationImageUpdateInput {
  image: Upload
  altText: String
  publication: PublicationRelateToOneInput
}

input PublicationImagesUpdateInput {
  id: ID!
  data: PublicationImageUpdateInput
}

input PublicationImageCreateInput {
  image: Upload
  altText: String
  publication: PublicationRelateToOneInput
}

input PublicationImagesCreateInput {
  data: PublicationImageCreateInput
}

input ReviewRelateToOneInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
  disconnect: ReviewWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Weight {
  id: ID!
  weight_in_kg: String
  size_in_cm: String
  bike: Bike
  review: Review
}

input WeightWhereInput {
  AND: [WeightWhereInput]
  OR: [WeightWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  weight_in_kg: String
  weight_in_kg_not: String
  weight_in_kg_contains: String
  weight_in_kg_not_contains: String
  weight_in_kg_starts_with: String
  weight_in_kg_not_starts_with: String
  weight_in_kg_ends_with: String
  weight_in_kg_not_ends_with: String
  weight_in_kg_i: String
  weight_in_kg_not_i: String
  weight_in_kg_contains_i: String
  weight_in_kg_not_contains_i: String
  weight_in_kg_starts_with_i: String
  weight_in_kg_not_starts_with_i: String
  weight_in_kg_ends_with_i: String
  weight_in_kg_not_ends_with_i: String
  weight_in_kg_in: [String]
  weight_in_kg_not_in: [String]
  size_in_cm: String
  size_in_cm_not: String
  size_in_cm_contains: String
  size_in_cm_not_contains: String
  size_in_cm_starts_with: String
  size_in_cm_not_starts_with: String
  size_in_cm_ends_with: String
  size_in_cm_not_ends_with: String
  size_in_cm_i: String
  size_in_cm_not_i: String
  size_in_cm_contains_i: String
  size_in_cm_not_contains_i: String
  size_in_cm_starts_with_i: String
  size_in_cm_not_starts_with_i: String
  size_in_cm_ends_with_i: String
  size_in_cm_not_ends_with_i: String
  size_in_cm_in: [String]
  size_in_cm_not_in: [String]
  bike: BikeWhereInput
  bike_is_null: Boolean
  review: ReviewWhereInput
  review_is_null: Boolean
}

input WeightWhereUniqueInput {
  id: ID!
}

enum SortWeightsBy {
  id_ASC
  id_DESC
  weight_in_kg_ASC
  weight_in_kg_DESC
  size_in_cm_ASC
  size_in_cm_DESC
  bike_ASC
  bike_DESC
  review_ASC
  review_DESC
}

input WeightUpdateInput {
  weight_in_kg: String
  size_in_cm: String
  bike: BikeRelateToOneInput
  review: ReviewRelateToOneInput
}

input WeightsUpdateInput {
  id: ID!
  data: WeightUpdateInput
}

input WeightCreateInput {
  weight_in_kg: String
  size_in_cm: String
  bike: BikeRelateToOneInput
  review: ReviewRelateToOneInput
}

input WeightsCreateInput {
  data: WeightCreateInput
}

input WeightRelateToOneInput {
  create: WeightCreateInput
  connect: WeightWhereUniqueInput
  disconnect: WeightWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Review {
  id: ID!
  publication: Publication
  bike: Bike
  specific_bike_model_version_on_test: String
  weight: Weight
  headline: String
  summary: String
  link: String
  date: String
  score: String
  author: String
}

input ReviewWhereInput {
  AND: [ReviewWhereInput]
  OR: [ReviewWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  publication: PublicationWhereInput
  publication_is_null: Boolean
  bike: BikeWhereInput
  bike_is_null: Boolean
  specific_bike_model_version_on_test: String
  specific_bike_model_version_on_test_not: String
  specific_bike_model_version_on_test_contains: String
  specific_bike_model_version_on_test_not_contains: String
  specific_bike_model_version_on_test_starts_with: String
  specific_bike_model_version_on_test_not_starts_with: String
  specific_bike_model_version_on_test_ends_with: String
  specific_bike_model_version_on_test_not_ends_with: String
  specific_bike_model_version_on_test_i: String
  specific_bike_model_version_on_test_not_i: String
  specific_bike_model_version_on_test_contains_i: String
  specific_bike_model_version_on_test_not_contains_i: String
  specific_bike_model_version_on_test_starts_with_i: String
  specific_bike_model_version_on_test_not_starts_with_i: String
  specific_bike_model_version_on_test_ends_with_i: String
  specific_bike_model_version_on_test_not_ends_with_i: String
  specific_bike_model_version_on_test_in: [String]
  specific_bike_model_version_on_test_not_in: [String]
  weight: WeightWhereInput
  weight_is_null: Boolean
  headline: String
  headline_not: String
  headline_contains: String
  headline_not_contains: String
  headline_starts_with: String
  headline_not_starts_with: String
  headline_ends_with: String
  headline_not_ends_with: String
  headline_i: String
  headline_not_i: String
  headline_contains_i: String
  headline_not_contains_i: String
  headline_starts_with_i: String
  headline_not_starts_with_i: String
  headline_ends_with_i: String
  headline_not_ends_with_i: String
  headline_in: [String]
  headline_not_in: [String]
  summary: String
  summary_not: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  summary_i: String
  summary_not_i: String
  summary_contains_i: String
  summary_not_contains_i: String
  summary_starts_with_i: String
  summary_not_starts_with_i: String
  summary_ends_with_i: String
  summary_not_ends_with_i: String
  summary_in: [String]
  summary_not_in: [String]
  link: String
  link_not: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  link_i: String
  link_not_i: String
  link_contains_i: String
  link_not_contains_i: String
  link_starts_with_i: String
  link_not_starts_with_i: String
  link_ends_with_i: String
  link_not_ends_with_i: String
  link_in: [String]
  link_not_in: [String]
  date: String
  date_not: String
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_in: [String]
  date_not_in: [String]
  score: String
  score_not: String
  score_contains: String
  score_not_contains: String
  score_starts_with: String
  score_not_starts_with: String
  score_ends_with: String
  score_not_ends_with: String
  score_i: String
  score_not_i: String
  score_contains_i: String
  score_not_contains_i: String
  score_starts_with_i: String
  score_not_starts_with_i: String
  score_ends_with_i: String
  score_not_ends_with_i: String
  score_in: [String]
  score_not_in: [String]
  author: String
  author_not: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  author_i: String
  author_not_i: String
  author_contains_i: String
  author_not_contains_i: String
  author_starts_with_i: String
  author_not_starts_with_i: String
  author_ends_with_i: String
  author_not_ends_with_i: String
  author_in: [String]
  author_not_in: [String]
}

input ReviewWhereUniqueInput {
  id: ID!
}

enum SortReviewsBy {
  id_ASC
  id_DESC
  publication_ASC
  publication_DESC
  bike_ASC
  bike_DESC
  specific_bike_model_version_on_test_ASC
  specific_bike_model_version_on_test_DESC
  weight_ASC
  weight_DESC
  headline_ASC
  headline_DESC
  summary_ASC
  summary_DESC
  link_ASC
  link_DESC
  date_ASC
  date_DESC
  score_ASC
  score_DESC
  author_ASC
  author_DESC
}

input ReviewUpdateInput {
  publication: PublicationRelateToOneInput
  bike: BikeRelateToOneInput
  specific_bike_model_version_on_test: String
  weight: WeightRelateToOneInput
  headline: String
  summary: String
  link: String
  date: String
  score: String
  author: String
}

input ReviewsUpdateInput {
  id: ID!
  data: ReviewUpdateInput
}

input ReviewCreateInput {
  publication: PublicationRelateToOneInput
  bike: BikeRelateToOneInput
  specific_bike_model_version_on_test: String
  weight: WeightRelateToOneInput
  headline: String
  summary: String
  link: String
  date: String
  score: String
  author: String
}

input ReviewsCreateInput {
  data: ReviewCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Bike items which match the where clause. """
  allBikes(where: BikeWhereInput, search: String, sortBy: [SortBikesBy!], orderBy: String, first: Int, skip: Int): [Bike]

  """ Search for the Bike item with the matching ID. """
  Bike(where: BikeWhereUniqueInput!): Bike

  """ Perform a meta-query on all Bike items which match the where clause. """
  _allBikesMeta(where: BikeWhereInput, search: String, sortBy: [SortBikesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Bike list. """
  _BikesMeta: _ListMeta

  """ Search for all BikeImage items which match the where clause. """
  allBikeImages(where: BikeImageWhereInput, search: String, sortBy: [SortBikeImagesBy!], orderBy: String, first: Int, skip: Int): [BikeImage]

  """ Search for the BikeImage item with the matching ID. """
  BikeImage(where: BikeImageWhereUniqueInput!): BikeImage

  """ Perform a meta-query on all BikeImage items which match the where clause. 
  """
  _allBikeImagesMeta(where: BikeImageWhereInput, search: String, sortBy: [SortBikeImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the BikeImage list. """
  _BikeImagesMeta: _ListMeta

  """ Search for all Publication items which match the where clause. """
  allPublications(where: PublicationWhereInput, search: String, sortBy: [SortPublicationsBy!], orderBy: String, first: Int, skip: Int): [Publication]

  """ Search for the Publication item with the matching ID. """
  Publication(where: PublicationWhereUniqueInput!): Publication

  """ Perform a meta-query on all Publication items which match the where clause. 
  """
  _allPublicationsMeta(where: PublicationWhereInput, search: String, sortBy: [SortPublicationsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Publication list. """
  _PublicationsMeta: _ListMeta

  """ Search for all PublicationImage items which match the where clause. """
  allPublicationImages(where: PublicationImageWhereInput, search: String, sortBy: [SortPublicationImagesBy!], orderBy: String, first: Int, skip: Int): [PublicationImage]

  """ Search for the PublicationImage item with the matching ID. """
  PublicationImage(where: PublicationImageWhereUniqueInput!): PublicationImage

  """ Perform a meta-query on all PublicationImage items which match the where clause. 
  """
  _allPublicationImagesMeta(where: PublicationImageWhereInput, search: String, sortBy: [SortPublicationImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the PublicationImage list. """
  _PublicationImagesMeta: _ListMeta

  """ Search for all Weight items which match the where clause. """
  allWeights(where: WeightWhereInput, search: String, sortBy: [SortWeightsBy!], orderBy: String, first: Int, skip: Int): [Weight]

  """ Search for the Weight item with the matching ID. """
  Weight(where: WeightWhereUniqueInput!): Weight

  """ Perform a meta-query on all Weight items which match the where clause. 
  """
  _allWeightsMeta(where: WeightWhereInput, search: String, sortBy: [SortWeightsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Weight list. """
  _WeightsMeta: _ListMeta

  """ Search for all Review items which match the where clause. """
  allReviews(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): [Review]

  """ Search for the Review item with the matching ID. """
  Review(where: ReviewWhereUniqueInput!): Review

  """ Perform a meta-query on all Review items which match the where clause. 
  """
  _allReviewsMeta(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Review list. """
  _ReviewsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Bike item. """
  createBike(data: BikeCreateInput): Bike

  """ Create multiple Bike items. """
  createBikes(data: [BikesCreateInput]): [Bike]

  """ Update a single Bike item by ID. """
  updateBike(id: ID!, data: BikeUpdateInput): Bike

  """ Update multiple Bike items by ID. """
  updateBikes(data: [BikesUpdateInput]): [Bike]

  """ Delete a single Bike item by ID. """
  deleteBike(id: ID!): Bike

  """ Delete multiple Bike items by ID. """
  deleteBikes(ids: [ID!]): [Bike]

  """ Create a single BikeImage item. """
  createBikeImage(data: BikeImageCreateInput): BikeImage

  """ Create multiple BikeImage items. """
  createBikeImages(data: [BikeImagesCreateInput]): [BikeImage]

  """ Update a single BikeImage item by ID. """
  updateBikeImage(id: ID!, data: BikeImageUpdateInput): BikeImage

  """ Update multiple BikeImage items by ID. """
  updateBikeImages(data: [BikeImagesUpdateInput]): [BikeImage]

  """ Delete a single BikeImage item by ID. """
  deleteBikeImage(id: ID!): BikeImage

  """ Delete multiple BikeImage items by ID. """
  deleteBikeImages(ids: [ID!]): [BikeImage]

  """ Create a single Publication item. """
  createPublication(data: PublicationCreateInput): Publication

  """ Create multiple Publication items. """
  createPublications(data: [PublicationsCreateInput]): [Publication]

  """ Update a single Publication item by ID. """
  updatePublication(id: ID!, data: PublicationUpdateInput): Publication

  """ Update multiple Publication items by ID. """
  updatePublications(data: [PublicationsUpdateInput]): [Publication]

  """ Delete a single Publication item by ID. """
  deletePublication(id: ID!): Publication

  """ Delete multiple Publication items by ID. """
  deletePublications(ids: [ID!]): [Publication]

  """ Create a single PublicationImage item. """
  createPublicationImage(data: PublicationImageCreateInput): PublicationImage

  """ Create multiple PublicationImage items. """
  createPublicationImages(data: [PublicationImagesCreateInput]): [PublicationImage]

  """ Update a single PublicationImage item by ID. """
  updatePublicationImage(id: ID!, data: PublicationImageUpdateInput): PublicationImage

  """ Update multiple PublicationImage items by ID. """
  updatePublicationImages(data: [PublicationImagesUpdateInput]): [PublicationImage]

  """ Delete a single PublicationImage item by ID. """
  deletePublicationImage(id: ID!): PublicationImage

  """ Delete multiple PublicationImage items by ID. """
  deletePublicationImages(ids: [ID!]): [PublicationImage]

  """ Create a single Weight item. """
  createWeight(data: WeightCreateInput): Weight

  """ Create multiple Weight items. """
  createWeights(data: [WeightsCreateInput]): [Weight]

  """ Update a single Weight item by ID. """
  updateWeight(id: ID!, data: WeightUpdateInput): Weight

  """ Update multiple Weight items by ID. """
  updateWeights(data: [WeightsUpdateInput]): [Weight]

  """ Delete a single Weight item by ID. """
  deleteWeight(id: ID!): Weight

  """ Delete multiple Weight items by ID. """
  deleteWeights(ids: [ID!]): [Weight]

  """ Create a single Review item. """
  createReview(data: ReviewCreateInput): Review

  """ Create multiple Review items. """
  createReviews(data: [ReviewsCreateInput]): [Review]

  """ Update a single Review item by ID. """
  updateReview(id: ID!, data: ReviewUpdateInput): Review

  """ Update multiple Review items by ID. """
  updateReviews(data: [ReviewsUpdateInput]): [Review]

  """ Delete a single Review item by ID. """
  deleteReview(id: ID!): Review

  """ Delete multiple Review items by ID. """
  deleteReviews(ids: [ID!]): [Review]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
